// Generated by CoffeeScript 1.5.0

Wistia.plugin('prez', function(video, options) {
  var Timings, height, position, prezElem, slideChange, speakerDeck, suppressSlideSync, suppressSlideSyncTemporarily, timings, updateTimings, width;
  Timings = (function() {

    function Timings(pairs) {
      this.pairs = pairs || [];
      this.reversePairs = this.pairs.reverse();
    }

    Timings.prototype.slideForTime = function(time) {
      var pair, _i, _len, _ref;
      _ref = this.reversePairs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pair = _ref[_i];
        if (time >= pair[1]) {
          return pair[0];
        }
      }
      return null;
    };

    Timings.prototype.timeForSlide = function(slide) {
      var pair, _i, _len, _ref;
      _ref = this.pairs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pair = _ref[_i];
        if (slide === pair[0]) {
          return pair[1];
        }
      }
      return null;
    };

    return Timings;

  })();
  timings = new Timings();
  updateTimings = function(pairs) {
    console.log("updated timings");
    return timings = new Timings(pairs);
  };
  slideChange = function(slide) {
    var time;
    if (!(video.state() === 'playing' || video.state() === 'paused')) {
      return;
    }
    if (suppressSlideSync) {
      return console.log("SUPPRESSING SYNC: changed slide to: " + slide);
    } else {
      suppressSlideSyncTemporarily();
      time = timings.timeForSlide(slide);
      console.log("SYNCING: " + slide + " -> " + time);
      if (time !== null) {
        return video.time(time);
      }
    }
  };
  speakerDeck = null;
  window.onSpeakerDeckPlayerReady = function(s) {
    speakerDeck = s;
    return speakerDeck.on('change', function(slide) {
      return slideChange(slide.number);
    });
  };
  Wistia.remote.script('//speakerdeck.com/assets/embed.js');
  suppressSlideSync = false;
  suppressSlideSyncTemporarily = function() {
    console.log('suppressing');
    suppressSlideSync = true;
    return setTimeout(function() {
      return suppressSlideSync = false;
    }, 100);
  };
  video.bind('timechange', function(t) {
    var slideNum;
    slideNum = timings.slideForTime(t);
    console.log("time is: " + t + ", should be on slide: " + slideNum);
    if (speakerDeck.currentSlide.number !== slideNum) {
      suppressSlideSyncTemporarily();
      return speakerDeck.goToSlide(slideNum);
    }
  });
  position = options.position || 'right';
  width = options.width || video.width();
  height = options.height || video.height();
  prezElem = document.createElement('div');
  prezElem.innerHTML = "<div class='speakerdeck-embed' data-id='" + options.speakerDeckId + "'></div>";
  prezElem.style.width = "" + width + "px";
  prezElem.style.height = "" + height + "px";
  video.grid[position].appendChild(prezElem);
  video.fit();
  return {
    updateTimings: updateTimings
  };
});
