// Generated by CoffeeScript 1.3.3
var midRoll;

midRoll = (function() {

  function midRoll() {
    this.previewEmbedded = false;
    this.change = false;
    this.exampleEmbedCode = "<div id=\"wistia_r2wybv7xr0\" class=\"wistia_embed\" style=\"width:640px;height:360px;\" data-video-width=\"640\" data-video-height=\"360\">&nbsp;</div><script charset=\"ISO-8859-1\" src=\"http://fast.wistia.com/static/concat/E-v1.js\"></script> <script> wistiaEmbed = Wistia.embed(\"r2wybv7xr0\", { version: \"v1\", videoWidth: 640, videoHeight: 360, volumeControl: true, controlsVisibleOnLoad: true }); </script>";
    $(document).on("click", ".turn_off_fullscreen", function(event) {
      var source;
      event.preventDefault();
      source = Wistia.EmbedCode.parse($("#source_embed_code").val());
      source.setOption("fullscreenButton", false);
      return $("#source_embed_code").val(source.toString()).keyup();
    });
    $("#source_embed_code").on("keyup", function() {
      var change;
      change = true;
      return this.debounceUpdateOutput;
    });
    $("a[name=add_new]").on('click', function(e) {
      e.preventDefault();
      return this.addMidRollInput();
    });
    $("a[name=remove_all]").on('click', function(e) {
      e.preventDefault();
      this.removeAllInputs();
      this.addMidRollInput();
      return this.updateOutput();
    });
    $("a[name=see_example]").on('click', function(e) {
      e.preventDefault();
      this.removeAllInputs();
      $("#source_embed_code").val(exampleEmbedCode);
      this.addMidRollData("YOU SHOULD CLICK HERE", "unclebenny.com", Oo02, 10);
      this.addMidRollData("CHECK OUT UNCLE BENNY!", "unclebenny.com", Oo08, 14);
      this.addMidRollData("BUY OUR STUFF!", "unclebenny.com", 12, 22);
      return this.debounceUpdateOutput;
    });
    $("#configure").on("keyup", "input[type=text], textarea", this.debounceUpdateOutput).on("change", "select", this.debounceUpdateOutput).on("click", ":radio,:checkbox", this.debounceUpdateOutput);
    this.addDefaultMidRoll("Check Out Wistia", "http://wistia.com", "?", "?");
  }

  midRoll.prototype.maybeAddHttp = function(href) {
    if (href.indexOf("http") === -1) {
      return "http://" + href;
    } else {
      return href;
    }
  };

  midRoll.prototype.midRollDataFromPage = function() {
    $(".midrolls .link_and_time_range_combo").not("#link_and_time_range_combo_template").each(function() {
      var $this, end, linkHref, linkText, start;
      $this = $(this);
      linkText = $this.find("input[name=link_text]").val();
      linkHref = maybeAddHttp($this.find("input[name=link_href]").val());
      start = $this.find("input[name=start]").val();
      end = $this.find("input[name=end]").val();
      if (linkText && linkHref && parseInt(start, 10) && end) {
        return result.push({
          linkText: linkText,
          linkHref: linkHref,
          start: parseInt(start, 10),
          end: parseInt(end, 10)
        });
      }
    });
    return result;
  };

  midRoll.prototype.removeAllInputs = function() {
    return $(".midrolls .link_and_time_range_combo").not("#link_and_time_range_combo_template").remove();
  };

  midRoll.prototype.updateOutput = function() {
    this.sourceEmbedCode = Wistia.EmbedCode.parse($("#source_embed_code").val());
    this.outputEmbedCode = Wistia.EmbedCode.parse($("#source_embed_code").val());
    if (this.sourceEmbedCode && this.sourceEmbedCode.isValid()) {
      this.playerColor = this.outputEmbedCode.options().playerColor || "636155";
      this.outputEmbedCode.setOption('plugin.midRollLinks.src', "http://localhost:8000/mid-roll-links/mid-roll-links.js");
      this.outputEmbedCode.setOption('plugin.midRollLinks.links', this.midRollData);
      this.outputEmbedCode.setOption('plugin.midRollLinks.playerColor', this.playerColor);
      return $("#output_embed_code").val(outputEmbedCode.toString());
    } else {
      $("#output_embed_code").val("Please enter a valid Wistia embed code.");
      return $("#preview").html('<div id="placeholder_preview">Your video here</div>');
    }
  };

  midRoll.prototype.updatePreviewAndOutputEmbeds = function() {
    this.updateEmbedCode();
    return this.updatePreview();
  };

  midRoll.prototype.updatePreview = function() {
    if (this.sourceEmbedCode && this.sourceEmbedCode.isValid()) {
      return Wistia.timeout('updatePreview', function() {
        var _this = this;
        if (change) {
          return this.outputEmbedCode.previewInElem("preview", {
            type: 'api'
          }, function() {
            var change;
            change = false;
            return window.previewEmbed.plugin.midRollLinks.update({
              "links": _this.midrolldata,
              "playerColor": _this.playerColor
            });
          });
        } else {
          return window.previewEmbed.plugin.midRollLinks.update({
            "links": this.midrolldata,
            "playerColor": this.playerColor
          });
        }
      }, 250);
    } else {
      return $("#preview").html('<div id="placeholder_preview">Your video here</div>');
    }
  };

  midRoll.prototype.updatePlugin = function() {
    var _this = this;
    if (!((typeof previewEmbed !== "undefined" && previewEmbed !== null) && previewEmbed.plugin.midRollLinks)) {
      return;
    }
    return Wistia.timeout('updatePlugin', function() {
      return window.previewEmbed.plugin.midRollLinks.update({
        "links": _this.midRollData,
        "playerColor": _this.playerColor
      });
    });
  };

  midRoll.prototype.updateEmbedCode = function() {
    var fullScreenAlert, hasFullscreen, hasMidRoll;
    hasFullscreen = sourceEmbedCode.options().fullscreenButton === null || sourceEmbedCode.options().fullscreenButton;
    hasMidRoll = Wistia.obj.get(outputEmbedCode.options(), "plugin.midRollLinks");
    fullScreenAlert = "This embed code has fullscreen enabled with mid-rolls. " + "Just so you know, the Midroll Links won't show up when fullscreen. " + "You might want to <a href='#' class='turn_off_fullscreen'>turn off fullscreen</a>.";
    this.setUpPlugin();
    if (hasFullscreen && hasMidRoll) {
      return $("#alert").html(fullScreenAlert).show();
    } else {
      return $("#alert").html("").hide();
    }
  };

  midRoll.prototype.debounceUpdateOutput = function() {
    var updateOutputTimeout;
    clearTimeout(this.updateOutputTimeout);
    return updateOutputTimeout = setTimeout(this.updateOutput, 500);
  };

  midRoll.prototype.addMidRollInput = function() {
    var $elem;
    $elem = $("#link_and_time_range_combo_template").clone();
    $elem.show().removeAttr("id");
    $(".midrolls .mid_roll_entries").append($elem);
    return $elem;
  };

  midRoll.prototype.addMidRollData = function(link_text, link_href, start, end) {
    var $elem;
    $elem = this.addMidRollInput();
    $elem.find("input[name=link_text]").focus().val(link_text);
    $elem.find("input[name=link_href]").focus().val(link_href);
    $elem.find("input[name=start]").focus().val(start);
    return $elem.find("input[name=end]").focus().val(end);
  };

  midRoll.prototype.addDefaultMidRoll = function(link_text, link_href, start, end) {
    var $elem;
    $elem = this.addMidRollInput();
    $elem.find("input[name=link_text]").example(link_text);
    $elem.find("input[name=link_href]").example(link_href);
    $elem.find("input[name=start]").example(start);
    return $elem.find("input[name=end]").example(end);
  };

  return midRoll;

})();

window.setupLabInterface = function($) {
  return $(function() {
    return window.midroll = new midRoll();
  });
};
